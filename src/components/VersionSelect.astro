---
// src/components/VersionSelect.astro

import { VERSIONS } from '../data/versions';

// newest entry first
const [{ tag: LATEST_TAG, label: LATEST_LABEL }] = VERSIONS;

// compute ROOT at build time from BASE_URL
const RAW_BASE = import.meta.env.BASE_URL; // e.g. '/' or '/reportifyr_docs/'
const ROOT = RAW_BASE
  .replace(/\/versions\/[^/]+\/?$/, '')   // strip any "/versions/x.y.z"
  .replace(/\/$/, '');                    // drop trailing slash
---

<select
  id="version-select"
  aria-label="Documentation version"
  style="padding:.25rem;border-radius:.25rem"
  onchange="switchVersion(this.value)"
>
  <option value={LATEST_TAG}>Latest&nbsp;({LATEST_LABEL})</option>
  {VERSIONS.slice(1).map(({ tag, label }) => (
    <option value={tag}>{label}</option>
  ))}
</select>

<script is:inline>
{`
(function() {
  const LATEST = ${JSON.stringify(LATEST_TAG)};
  const ROOT   = ${JSON.stringify(ROOT)};

  const sel = document.getElementById('version-select');
  if (!sel) return;

  // figure out current tag & tail
  const path = location.pathname; 
  const match = path.match(new RegExp('^' + ROOT.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') + '/versions/([^/]+)'));
  const tail = match
    ? path.replace(new RegExp('^' + ROOT.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') + '/versions/[^/]+'), '')
    : path.replace(new RegExp('^' + ROOT), '/');

  sel.value = match ? match[1] : LATEST;

  window.switchVersion = async function(tag) {
    const target = tag === LATEST
      ? `${ROOT}${tail}`
      : `${ROOT}/versions/${tag}${tail}`;

    try {
      const ok = await fetch(target, { method: 'HEAD' }).then(r => r.ok);
      location.href = ok
        ? target
        : (tag === LATEST
            ? `${ROOT}/`
            : `${ROOT}/versions/${tag}/`);
    } catch {
      location.href = tag === LATEST
        ? `${ROOT}/`
        : `${ROOT}/versions/${tag}/`;
    }
  };
})();
`}
</script>
