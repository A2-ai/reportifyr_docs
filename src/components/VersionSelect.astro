---
import { VERSIONS } from '../data/versions';

/** ---------- constants we can calculate once ---------- */
const ROOT = import.meta.env.BASE_URL        // e.g. '/reportifyr_docs/'            (latest)
              .replace(/\/versions\/[^/]+\/?$/, '')  // remove '/versions/x.y.z'
              .replace(/\/$/, '');                   // drop trailing slash

const [{ tag: LATEST_TAG, label: LATEST_LABEL }] = VERSIONS;

/** helper: build a fully qualified path for the same page in another tag */
const buildTarget = (tag, tail) =>
  tag === LATEST_TAG
    ? `${ROOT}${tail || '/'}`
    : `${ROOT}/versions/${tag}${tail}`;
---

<select
  id="version-select"
  aria-label="Documentation version"
  onchange="switchVersion(this.value)"
  style="padding:.25rem;border-radius:.25rem"
>
  <option value={LATEST_TAG}>Latest&nbsp;({LATEST_LABEL})</option>
  {VERSIONS.slice(1).map(({ tag, label }) => (
    <option value={tag}>{label}</option>
  ))}
</select>

<script is:inline>
(function () {
  const LATEST = /* @once */ '<?=LATEST_TAG?>';
  const ROOT   = '<?=ROOT?>';                 // injected at build time

  const sel  = document.getElementById('version-select');
  if (!sel) return;

  /* ---------- work out where we are ---------- */
  const path  = location.pathname;            // e.g. /reportifyr_docs/… or /reportifyr_docs/versions/x.y.z/…
  const m     = path.match(/^\/[^/]+\/versions\/([^/]+)/);   // capture tag if present
  const tail  = m ? path.replace(/^\/[^/]+\/versions\/[^/]+/, '')   // '/guide/foo'
                  : path.replace(/^\/[^/]+/, '');                    // latest → strip '/reportifyr_docs'

  sel.value = m ? m[1] : LATEST;

  /* ---------- change handler ---------- */
  window.switchVersion = async function (tag) {
    const target = tag === LATEST
      ? `${ROOT}${tail || '/'}`
      : `${ROOT}/versions/${tag}${tail}`;

    try {
      const ok = await fetch(target, { method: 'HEAD' }).then(r => r.ok);
      location.href = ok ? target
                         : (tag === LATEST ? `${ROOT}/` : `${ROOT}/versions/${tag}/`);
    } catch {
      location.href = tag === LATEST ? `${ROOT}/` : `${ROOT}/versions/${tag}/`;
    }
  };
})();
</script>
