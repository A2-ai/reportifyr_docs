---
import { VERSIONS } from '../data/versions';

/* -------------------------------------------------
 * Constants we can compute once at build-time
 * ------------------------------------------------- */

// newest entry first
const [{ tag: LATEST_TAG, label: LATEST_LABEL }] = VERSIONS;

/** Repo root ('' in dev, '/reportifyr_docs' on GitHub Pages) */
const ROOT = import.meta.env.BASE_URL                 // '/reportifyr_docs/' or '/'
  .replace(/\/versions\/[^/]+\/?$/, '')               // strip '/versions/x.y.z'
  .replace(/\/$/, '');                                // drop trailing '/'

/** Helper to build a fully qualified path for the same “tail” in another tag */
function buildTarget(tag: string, tail: string): string {
  return tag === LATEST_TAG
    ? `${ROOT}${tail || '/'}`
    : `${ROOT}/versions/${tag}${tail}`;
}
---

<select
  id="version-select"
  aria-label="Documentation version"
  onchange="switchVersion(this.value)"
  style="padding:.25rem;border-radius:.25rem"
>
  <option value={LATEST_TAG}>Latest&nbsp;({LATEST_LABEL})</option>

  {VERSIONS.slice(1).map(({ tag, label }) => (
    <option value={tag}>{label}</option>
  ))}
</select>

<script is:inline>
(function () {
  const LATEST = '<?=LATEST_TAG?>';
  const ROOT   = '<?=ROOT?>';        // injected during build

  const sel  = document.getElementById('version-select');
  if (!sel) return;

  /* -------- determine where we are right now -------- */
  const path  = location.pathname;                           // e.g. /reportifyr_docs/… or /reportifyr_docs/versions/x.y.z/…
  const m     = path.match(/^\/[^/]+\/versions\/([^/]+)/);    // capture tag if present
  const tail  = m ? path.replace(/^\/[^/]+\/versions\/[^/]+/, '')
                  : path.replace(/^\/[^/]+/, '');            // strip '/reportifyr_docs' on latest
  sel.value   = m ? m[1] : LATEST;

  /* -------- change-handler with fallback -------- */
  window.switchVersion = async function (tag) {
    const target = tag === LATEST
      ? `${ROOT}${tail || '/'}`
      : `${ROOT}/versions/${tag}${tail}`;

    try {
      const ok = await fetch(target, { method: 'HEAD' }).then(r => r.ok);
      location.href = ok
        ? target
        : (tag === LATEST ? `${ROOT}/` : `${ROOT}/versions/${tag}/`);
    } catch {
      location.href = tag === LATEST ? `${ROOT}/` : `${ROOT}/versions/${tag}/`;
    }
  };
})();
</script>
