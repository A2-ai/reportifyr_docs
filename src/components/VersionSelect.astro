---
import { VERSIONS } from '../data/versions';
// VERSIONS[0] is your latest
const [{ tag: LATEST_TAG, label: LATEST_LABEL }] = VERSIONS;
---

<select
  id="version-select"
  aria-label="Documentation version"
  style="padding:.25rem; border-radius:.25rem"
>
  <option value={LATEST_TAG}>Latest&nbsp;({LATEST_LABEL})</option>
  {VERSIONS.slice(1).map(({ tag, label }) => (
    <option value={tag}>{label}</option>
  ))}
</select>

<script is:inline>
(function () {
  const sel = document.getElementById('version-select');
  if (!sel) return;

  // pick up latest from the first <option>
  const LATEST = sel.options[0].value;

  // parse current path into projectRoot and version+tail
  const [projectRoot, rest] = location.pathname.split('/versions/');
  let currentTag, tail;

  if (rest) {
    // on a versioned page: rest = "0.2.6/..."
    const parts = rest.split('/');
    currentTag = parts.shift();            // e.g. "0.2.6"
    tail = parts.length ? '/' + parts.join('/') : '/';
  } else {
    // on latest
    currentTag = LATEST;
    tail = location.pathname.replace(/^\/[^/]+/, '') || '/';
  }

  console.log('[VersionSelect] projectRoot:', projectRoot);
  console.log('[VersionSelect] currentTag :', currentTag);
  console.log('[VersionSelect] tail       :', tail);

  // pre-select current version
  sel.value = currentTag;

  // define the global switchVersion handler
  window.switchVersion = function (tag) {
    // compute tail fresh from current URL
    const path = location.pathname;
    const afterRoot = path.startsWith(projectRoot)
      ? path.slice(projectRoot.length)     // "/versions/x.y.z/..." OR "/..."
      : path;

    let tail;
    if (afterRoot.startsWith('/versions/')) {
      // strip "/versions/currentTag" to get tail
      tail = afterRoot.replace(/^\/versions\/[^/]+/, '') || '/';
    } else {
      tail = afterRoot || '/';
    }

        const target = projectRoot + '/versions/' + tag + tail;

    console.log('  computed target:', target);

    fetch(target, { method: 'GET', cache: 'no-cache', redirect: 'follow' })
      .then(r => {
        console.log('  fetch status:', r.status, 'ok:', r.ok);
        if (r.ok) {
          location.href = target;
        } else {
          location.href = projectRoot + '/versions/' + tag + '/';
        }
      })
      .catch(err => {
        console.error('  fetch error:', err);
        location.href = projectRoot + '/versions/' + tag + '/';
      });
  };

  // wire up change event to global handler
  sel.addEventListener('change', () => window.switchVersion(sel.value));
})();
</script>
