---
import { VERSIONS } from '../data/versions';

/* -------------------------------------------
 * constants we can compute once at build-time
 * ------------------------------------------- */
const [{ tag: LATEST_TAG, label: LATEST_LABEL }] = VERSIONS;

/** '' in dev,  '/reportifyr_docs' on GH Pages */
const ROOT = import.meta.env.BASE_URL            // '/reportifyr_docs/' or '/'
  .replace(/\/versions\/[^/]+\/?$/, '')          // strip '/versions/x.y.z'
  .replace(/\/$/, '');                           // drop trailing slash

/** helper for type-safe callers inside Astro (not used in the browser) */
function buildTarget(tag: string, tail = ''): string {
  return tag === LATEST_TAG ? `${ROOT}${tail || '/'}`              // latest
                            : `${ROOT}/versions/${tag}${tail}`;    // older
}
---

<select
  id="version-select"
  aria-label="Documentation version"
  onchange="switchVersion(this.value)"
  style="padding:.25rem;border-radius:.25rem"
>
  <!-- Latest (always first) -->
  <option value={LATEST_TAG}>Latest&nbsp;({LATEST_LABEL})</option>

  {VERSIONS.slice(1).map(({ tag, label }) => (
    <option value={tag}>{label}</option>
  ))}
</select>

<script is:inline>
/* build-time injections â–¼ */
const LATEST = '${LATEST_TAG}';
const ROOT   = '${ROOT}';        // ''  or  '/reportifyr_docs'

/* ------------ figure out where we are now ------------ */
const sel  = document.getElementById('version-select');
if (sel) {
  const path  = location.pathname.replace(ROOT, '');   // strip ROOT
  const m     = path.match(/^\/versions\/([^/]+)/);    // tag if on old docs
  const tail  = m ? path.replace(/^\/versions\/[^/]+/, '') : path;
  sel.value   = m ? m[1] : LATEST;

  /* ---------- change-handler with 404 fallback ---------- */
  window.switchVersion = async function (tag) {
    const target = tag === LATEST
      ? ROOT + (tail || '/')
      : `${ROOT}/versions/${tag}${tail}`;

    try {
      const ok = await fetch(target, { method: 'HEAD' }).then(r => r.ok);
      location.href = ok
        ? target
        : (tag === LATEST ? ROOT + '/' : `${ROOT}/versions/${tag}/`);
    } catch {
      location.href = tag === LATEST ? ROOT + '/' : `${ROOT}/versions/${tag}/`;
    }
  };
}
</script>
